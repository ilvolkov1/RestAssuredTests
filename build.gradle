plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.10.0"
    id "io.freefair.lombok" version "6.0.0-m2"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.19.0",
    slf4jVersion = "1.7.32"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:5.9.3",
            "ch.qos.logback:logback-classic:1.4.12",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "io.rest-assured:rest-assured:5.3.0",
            "com.fasterxml.jackson.core:jackson-databind:2.14.2",
            "org.assertj:assertj-core:3.24.2"
    )

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    ignoreFailures = true

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}


tasks.register('CUSTOM_BUILD_AND_TEST_AND_SEND_TG_MSG') {
    def tasks = [clean, test, downloadAllure, allureReport]
    for (int i = 0; i < tasks.size() - 1; i++) {
        tasks[i + 1].mustRunAfter(tasks[i])
    }
    dependsOn(tasks)
    doLast {
        exec {
            commandLine 'java', '-DconfigFile=C:\\Test\\AQAProjects\\ParametrizedTestsAndReporting\\src\\notifications\\telegram.json', '-jar', 'C:\\Test\\AQAProjects\\ParametrizedTestsAndReporting\\src\\notifications\\allure-notifications-4.6.1.jar'
        }
    }
}

